/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subscription_service;


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Date;

import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import stackAndQueueExceptions.QueueEmptyException;
import stackAndQueueExceptions.QueueFullException;

/**
 *
 * @author maxnethercott
 */
public class Welcome extends javax.swing.JFrame {

    public int test;
    
    public int countRequest =0;

    public int getCountRequest() {
        return countRequest;
    }

    public void setCountRequest(int countRequest) {
        this.countRequest = countRequest;
    }

    
    

    private transactionsController tc;
    private membersController mc;
    private itemsController ic;

    /**
     * Creates new form Welcome
     */
    public Welcome() {
        tc = new transactionsController();
        mc = new membersController();

        ic = new itemsController();
        initComponents();

    }
    
    public Welcome(membersController members, itemsController items, transactionsController transactions)
    {
        tc = transactions;
        mc = members;
        
        ic = items;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfItems = new javax.swing.JList<>();
        BorrowItemButton = new javax.swing.JButton();
        RefreshItemsButton = new javax.swing.JButton();
        requestItemButton = new javax.swing.JButton();
        SearchItemButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ItemNumbersearch = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        TextAreaTran = new javax.swing.JTextArea();
        searchString = new javax.swing.JButton();
        SearchTitleField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        LogOut = new javax.swing.JButton();
        LoadTransactions = new javax.swing.JButton();
        LoadQueue = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times", 0, 48)); // NOI18N
        jLabel1.setText("Bargain Borrow ");

        listOfItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemsClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listOfItems);

        BorrowItemButton.setText("Borrow Item");
        BorrowItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrowItemButtonActionPerformed(evt);
            }
        });

        RefreshItemsButton.setText("Refresh Items");
        RefreshItemsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refresh_clicked(evt);
            }
        });
        RefreshItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshItemsButtonActionPerformed(evt);
            }
        });

        requestItemButton.setText("Request Item");
        requestItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestItemButtonActionPerformed(evt);
            }
        });

        SearchItemButton.setText("Search by item number");
        SearchItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchItemButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Your borrowing transactions:");

        jLabel3.setText("Format: Transaction ID, item ID, user ID, Date borrowed");

        ItemNumbersearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemNumbersearchActionPerformed(evt);
            }
        });

        TextAreaTran.setColumns(20);
        TextAreaTran.setRows(5);
        jScrollPane3.setViewportView(TextAreaTran);

        searchString.setText("Search by title");
        searchString.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStringActionPerformed(evt);
            }
        });

        requestTextArea.setColumns(20);
        requestTextArea.setRows(5);
        jScrollPane2.setViewportView(requestTextArea);

        jLabel4.setText("Items you have requested:");

        LogOut.setText("Log Out");
        LogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogOutActionPerformed(evt);
            }
        });

        LoadTransactions.setText("Load Transactions");
        LoadTransactions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadTransactionsActionPerformed(evt);
            }
        });

        LoadQueue.setText("Load Queue");
        LoadQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadQueueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RefreshItemsButton)
                                    .addComponent(BorrowItemButton)
                                    .addComponent(requestItemButton))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SearchItemButton)
                                    .addComponent(searchString))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ItemNumbersearch)
                                    .addComponent(SearchTitleField, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(LogOut)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LoadTransactions)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                                .addComponent(jScrollPane2))
                            .addComponent(LoadQueue))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel1)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshItemsButton)
                    .addComponent(SearchItemButton)
                    .addComponent(ItemNumbersearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadTransactions))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BorrowItemButton)
                    .addComponent(searchString)
                    .addComponent(SearchTitleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadQueue))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(requestItemButton)
                        .addContainerGap(70, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LogOut)
                        .addGap(43, 43, 43))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshItemsButtonActionPerformed

        //Put items array into the list of items 
        listOfItems.setModel(new javax.swing.AbstractListModel<String>() {

            public int getSize() {
                return ic.getItems().size();
            }

            public String getElementAt(int i) {
                return ic.getItems().get(i).toString();
            }

        });


    }//GEN-LAST:event_RefreshItemsButtonActionPerformed

    private void BorrowItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrowItemButtonActionPerformed

        try{
        
        //get the selected text from the list. 
        String textFromList = listOfItems.getSelectedValue();

        //use regex to get the itemID from the selected string
        String itemID = new Scanner(textFromList).findInLine("^(.*?),");
        //remove the comma at the end
        String newItemID = itemID.replaceAll(",", "");

        //make itemID an integer so that we can make it a transaction
        int test1 = Integer.parseInt(newItemID);

        //check if you have selected something. 
        if (textFromList != null) {

            //Check to see if we have already borrowed this item. 
            tc.searchTran(newItemID);

            //check to see if we have borrowed less than the maximum of 5 items
            tc.checkFor5();

            //Check to see if we have borrowed less than five items
            //use test1 to get the item ID. gets the correct element in the array.
            //stop says we havent or have already borrowed an item. 
           
           //if all elemts are okay we can borrow the item and minus 1 from the number available. 
           int ix=0;
           int countAll=0;
           for (Items i : ic.getItems()) {
           
            for (ix = i.getItemQ().getFront(); ix < i.getItemQ().size(); ix++) {

            
               

                if(i.getItemQ().getElementAt(ix) == mc.getCurrentUser() ){
                    countAll++;
                    
                    
                    System.out.println("This is count in welcome"+ countAll);
                    
                }
            }
           }
           
//        int  countRequest2 =0;
//        for (Items i : ic.getItems()) {
//            if(!i.getItemQ().isEmpty() ){
//      
//                
//                
//                System.out.println(i.getTitle() + " " +i.getItemQ().size());
//                countRequest2 += i.getItemQ().size();
//                System.out.println("This is the new counter "+countRequest2);
//                
//                System.out.println(i.getItemQ().size() );
//            }
//            
//        }
        
        //When the transactions + the requests are equal to five allow no more requests or transactions
        System.out.println("This is person count" +tc.getPersonCount());
        int total = countAll+tc.getPersonCount();
        if(countAll+tc.getPersonCount()>=5){
            JOptionPane.showMessageDialog(null, "You cannot request or borrow any more items ");
           
        }
            ic.searchItems(test1, tc.getStop(), tc.getFiveItems(), total);
            //call this method to deal with the number available
            //if the transOK is 1 then that means we can make the transaction and add it into the transaction array.
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String strDate = sdf.format(date);

            //If all these elements are okay then we can make the transactions
            //tran OK being 1 means the item is available
            //get stop means we havent already borrowed the item
            //five items means >=5 has been satisfied. 
            //System.out.println("This is count request "+countRequest);
            System.out.println("This is person Count "+ tc.getPersonCount());
             System.out.println("This is request count 1: "+countAll);
           
            
           
           
    
       
           
                
                
            
            if (ic.getTransOK() == 1 && (tc.getStop() == 0) && tc.getFiveItems() == 0 && countAll+tc.getPersonCount() < 5) {

            
                Transactions trans = new Transactions(tc.gen(), newItemID, mc.currentUser, strDate);

                tc.getTransactions().add(trans);
                //System.out.println(tc.getTransactions());

                /*
                This algorithm below over writes the item.csv with the current array. 
                So that next time when we load the items the number of available is correct. 
                
                For some reason i could not make this a method, it would make the items.csv empty 
                if this was a method.
                
                 */
                FileWriter fw = null;
                try {

                    //assign path to file
                    File file = new File("src/subscription_service/items.csv");

                    fw = new FileWriter(file, false);
                    //BufferedWriter writer give better performance
                    BufferedWriter bw = new BufferedWriter(fw);

                    //if the file doesnt exist make a new one
                    if (!file.exists()) {
                        file.createNewFile();
                    }

                    //Get each element from the items array and add overwirte the text file
                    String temp = "";
                    for (Items item : ic.getItems()) {

                        //put each count on a new line
                        temp += item.toString() + "\n";
                        //System.out.println(temp);

                    }
                    // System.out.println("THIS IS TEMP: " + temp);

                    bw.write(temp);
                    bw.flush();

                    //bw.write("\n");
                    bw.close();

                } catch (IOException ex) {
                    System.out.println("caught IOException");
                }

                //We can then add the transaction from the array to the text file
                try {

                    tc.writeToFileTransactions();

                } catch (IOException ex) {
                    Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
          
            
            
           
            // System.out.println(ic.getItems());

            String textArea = "";

            for (Transactions tran : tc.getTransactions()) {

                if (tran.getUserID() == mc.getCurrentUser()) {
                    textArea += tran.toString() + "\n";
                }
            }

            TextAreaTran.setText(textArea.toString());

        }

//        
//        for (Items i : ic.getItems()) {
//            
//            
//            if(!i.getItemQ().isEmpty() && i.getNumAvailable() !=0){
//                try {
//                    int memberid = i.getItemQ().dequeue();
//                    
//                    
//                    
//           
//                    
//                      
//                } catch (QueueEmptyException ex) {
//                    Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//            
//        }
        //This will add the transactions Straight into the box on the GUI. Instead of pressing button.
        }
        catch(NullPointerException ex){
            System.out.println("null");
            
        }

    }//GEN-LAST:event_BorrowItemButtonActionPerformed

    private void ItemsClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemsClicked


    }//GEN-LAST:event_ItemsClicked

    private void SearchItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchItemButtonActionPerformed
try{
        //Comparator used to enable sorting 
        Comparator compareItemNumbers = new Comparator<Items>() {

            @Override
            public int compare(Items i1, Items i2) {
                return i1.getItemNo() - i2.getItemNo();
            }
        };

        //use merge sort to sort arraylist of items 
        Collections.sort(ic.getItems(), compareItemNumbers);

        //get input from the GUI for item number to search for 
        int itemSearch = Integer.parseInt(ItemNumbersearch.getText());
        //test

        //use binary search to search the arraylist for the item 
        int index = Collections.binarySearch(ic.getItems(), new Items(itemSearch, null, 0), compareItemNumbers);

        //if the index of the item is negative then its not contained in the list
        if (index < 0) {
            JOptionPane.showMessageDialog(null, "We do not have this item");
        } 
        
        
        
          listOfItems.setModel(new javax.swing.AbstractListModel<String>() {

            public int getSize() {
                return ic.getItems().size()- ic.getItems().size()+1;
            }

            public String getElementAt(int i) {
                return ic.getItems().get(index).toString();
            }

        });
}
catch(ArrayIndexOutOfBoundsException ex){
    System.out.println("Out of bounds");
}
catch(NumberFormatException ex){
    System.out.println("number format ");
}

//        try {
//            int itemSearch = Integer.parseInt(ItemNumbersearch.getText());
//            int checkAvailable = 0;
//            for (Items item : ic.getItems()) {
//                checkAvailable = 0;
//                if (item.getItemNo() == itemSearch && item.getNumAvailable() > 0) {
//                    checkAvailable = 1;
//
//                }
//
//                if (checkAvailable == 1) {
//                    JOptionPane.showMessageDialog(null, "We have this item \n\n" + item.toString());
//                    break;
//                } else if (item.getItemNo() == itemSearch && item.getNumAvailable() == 0) {
//                    checkAvailable = 2;
//
//                }
//
//                if (checkAvailable == 2) {
//                    JOptionPane.showMessageDialog(null, "We have this item \n\n" + item.toString() + "\n\n However it is currently unavailable,\n would you like to request it?");
//                    break;
//                }
//
//            }
//            if (checkAvailable == 0) {
//                JOptionPane.showMessageDialog(null, "we do not have this item");
//            }
//
//        } catch (NumberFormatException ex) {
//            System.out.println("caught number format exception");
//            System.out.println(ex.getMessage());
//        }

    }//GEN-LAST:event_SearchItemButtonActionPerformed

    private void refresh_clicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refresh_clicked
        /*
        When the refresh items button is double clicked, this code puts the item CSV into the 
        items array. It then puts this informtation into the items list for viewing. 
        
        It then puts the transactions csv into the transactions array and checks to see if any of the 
        items have been borrowed for 7 or more days. It will then remove these transactions from the 
        persons array of transactions and incremement the number available of that item by 1. So it can 
        be used by someone else. 
        
        Finally it will then loop through the transactions array and then put all valid transactions 
        of who ever is logged in to the screen.
        
         */
        if (evt.getClickCount() % 2 == 0) {

            //function to put items CSV into the array of items.
            ic.RefreshItems();

            //put the array into the list of items 
            listOfItems.setModel(new javax.swing.AbstractListModel<String>() {

                public int getSize() {
                    return ic.getItems().size();

                }

                public String getElementAt(int i) {
                    return ic.getItems().get(i).toString();
                }

            });

            //loads transactions into transactions array.
            tc.RefreshTransactions();

            Calendar c = Calendar.getInstance();
            //format the date correctly
            SimpleDateFormat formatter = new SimpleDateFormat("dd/mm/yyyy");

            //loop through the array backwards so we dont get error when removing
            for (int i = tc.getTransactions().size() - 1; i >= 0; i--) {
                try {
                    //get the element
                    Transactions tran = tc.getTransactions().get(i);
                    //date borrowed, parse String into date.
                    Date dateBorrowed = formatter.parse(tran.getTime());

                    //c.setTime to the date borrowed
                    c.setTime(dateBorrowed);
                    //print out to debugger for testing
                    System.out.println(formatter.format(dateBorrowed));

                    //get the current date.
                    Date currentDate = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                    //format the current date correctly to match the date borrowed.
                    String strDate = sdf.format(currentDate);
                    Date Cdate = formatter.parse(strDate);

                    long diff = Cdate.getTime() - dateBorrowed.getTime();

                    long finalDifference = TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);

                    System.out.println("Days: " + TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS));

                    //looping through the items array
                    for (Items item : ic.getItems()) {
                        //System.out.println(tran.getItemID() + " " + item.getItemNo());

                        //get the element that needs removing due to 7 days being borrowed.
                        if (Integer.parseInt(tran.getItemID().trim()) == item.getItemNo() && finalDifference >= 7) {
                            //add 1 to the number available 
                            item.setNumAvailable(item.getNumAvailable() + 1);
                            //remove transaction
                            tc.getTransactions().remove(tran);
                            System.out.println("Removed trans with item id: " + item.getItemNo());
                            break;
                        }
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ConcurrentModificationException x) {
                    System.out.println("concurrent modification ");

                }
            }

//for testing purposes add user into queue for item at index 0.
            try {
                ic.getItems().get(0).getItemQ().enqueue(1101);
            } catch (QueueFullException ex) {
                Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
            }

            //looping through the items
            for (Items i : ic.getItems()) {

                //if the item queue isnt empty and the number available is no longer 0
                if (!i.getItemQ().isEmpty() && i.getNumAvailable() != 0) {

                    try {

                        //take the user off the queue
                        int memberID = i.getItemQ().dequeue();

                        //members mem = mc.searchMembers(memberID);
                        Date date = new Date();
                        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                        String strDate = sdf.format(date);

                        //make new transaction for this user
                        Transactions trans = new Transactions(tc.gen(), i.getItemNo() + "", memberID, strDate);
                        //mc.getMembers().get(mc.getMembers().indexOf(mem));
                        tc.getTransactions().add(trans);

                        //take one away from the number available again. 
                        i.setNumAvailable(i.getNumAvailable() - 1);

                    } catch (QueueEmptyException ex) {
                        Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }

            }
            
            
            

//            //update the transactions text field
//            String textArea = "";
//
//            for (Transactions tran : tc.getTransactions()) {
//
//                if (tran.getUserID() == mc.getCurrentUser()) {
//                    textArea += tran.toString() + "\n";
//                }
//            }
//
//            TextAreaTran.setText(textArea.toString());
        }

    }//GEN-LAST:event_refresh_clicked

    private void ItemNumbersearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemNumbersearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemNumbersearchActionPerformed

    private void searchStringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStringActionPerformed
        
        //use comparator to allow sorting of strings 
        Comparator compareItemStrings = new Comparator<Items>() {

            @Override
            public int compare(Items i1, Items i2) {
                return i1.getTitle().toLowerCase().compareTo(i2.getTitle().toLowerCase());
            }
        };

        //sort arraylist
        Collections.sort(ic.getItems(), compareItemStrings);

        //assign the input here
        String title = SearchTitleField.getText();

        //use binary search to search for string. 
        int index = Collections.binarySearch(ic.getItems(), new Items(0, title, 0), compareItemStrings);
        
        
      

        //check to see if we have the item
        try {
            //if the index of the item is negative then its not contained in the list
            if (index < 0) {
                JOptionPane.showMessageDialog(null, "We do not have this item");
            } 
            System.out.println(index);

        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Array is out of bounds");
        }

        
        
        listOfItems.setModel(new javax.swing.AbstractListModel<String>() {

            public int getSize() {
                return ic.getItems().size()- ic.getItems().size()+1;
            }

            public String getElementAt(int i) {
                return ic.getItems().get(index).toString();
            }

        });
        
        
        
//        String title = SearchTitleField.getText();
//
//        int checkTitle = 0;
//        for (Items item : ic.getItems()) {
//            checkTitle = 0;
//
//            if (item.getTitle().toLowerCase().equals(title)) {
//                checkTitle = 1;
//
//            }
//
//            if (checkTitle == 1) {
//
//                JOptionPane.showMessageDialog(null, "We have this item\n\n" + item.toString());
//                break;
//
//            }
//
//        }
//
//        if (checkTitle == 0) {
//            JOptionPane.showMessageDialog(null, "We do not have this item\n\n" + title);
//
//        }
//
//
    }//GEN-LAST:event_searchStringActionPerformed

    private void requestItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestItemButtonActionPerformed

        //If there are 5 transactions then do not allow a request. 
        tc.checkFor5();
     countRequest =0;
     
        for (Items i : ic.getItems()) {
            int ix;
            for (ix = i.getItemQ().getFront(); ix < i.getItemQ().size(); ix++) {
            if(!i.getItemQ().isEmpty() && i.getItemQ().getElementAt(ix) == mc.getCurrentUser()  ){
      
                
                
//                System.out.println(i.getTitle() + " " +i.getItemQ().size());
//                countRequest += i.getItemQ().size();
//                System.out.println("This is the new counter "+countRequest);
//                
//                System.out.println(i.getItemQ().size() );
                
countRequest++;
                System.out.println("This is new COUNTrequest "+countRequest);

            }
            } 
        }
        
        //When the transactions + the requests are equal to five allow no more requests or transactions
        System.out.println("This is person count" +tc.getPersonCount());
        if(countRequest+tc.getPersonCount()>=5){
            JOptionPane.showMessageDialog(null, "You cannot request or borrow any more items ");
            
        }
        
        
        
        //get the selected value in the list of items 
        String textFromList = listOfItems.getSelectedValue();
        //use regex to get item ID from String
        String itemID = new Scanner(textFromList).findInLine("^(.*?),");
        //remove the comma
        String newItemID = itemID.replaceAll(",", "");

        //make itemID an integer 
        int itemid = Integer.parseInt(newItemID);

        // ic.checkForRequestLimit();
        try {
            //This checks to see if we have already requested the item
            ic.checkForDuplicate(itemid);
        } catch (QueueEmptyException ex) {
            Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
        }

        
        //check if we are already using the item if so do not allow to request
        int flag =0;
        for (Transactions t : tc.getTransactions()) {
            
            if(t.getUserID()==mc.getCurrentUser() && t.getItemID().equals(itemid+"")){
                System.out.println("true");
                flag=1;
                JOptionPane.showMessageDialog(null, "You are currently using this item");
                break;
                
            }
        }
        
        
        
        
        
       
        if (textFromList != null && ic.getAlreadyRequested() == 0 && countRequest+tc.getPersonCount() < 5 && flag ==0 ) {

//add the user to the queue 
            for (Items i : ic.getItems()) {
                if (i.getItemNo() == itemid && i.getNumAvailable() == 0) {

                    try {

                        i.getItemQ().enqueue(mc.getCurrentUser());

                    } catch (QueueFullException ex) {
                        Logger.getLogger(Welcome.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else if (i.getItemNo() == itemid && i.getNumAvailable() != 0) {
                    JOptionPane.showMessageDialog(null, "This item is available to borrow");
                    break;
                }

            }

        }

        // add the queue ot the text area 
        String textArea = "";

        for (Items q : ic.getItems()) {

            if (q.getNumAvailable() == 0 && !q.getItemQ().isEmpty()) {
                textArea += q.getTitle() + " " + q.getItemQ().toString();
            }

        }

        requestTextArea.setText(textArea.toString());

        // TODO add your handling code here:
    }//GEN-LAST:event_requestItemButtonActionPerformed

    private void LogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogOutActionPerformed
    
          this.dispose();
        
        
         new loginGUI(mc, ic, tc).setVisible(true);
         
      
         
        
        
        
        
    }//GEN-LAST:event_LogOutActionPerformed

    private void LoadTransactionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadTransactionsActionPerformed
        //update the transactions text field
            String textArea = "";

            for (Transactions tran : tc.getTransactions()) {

                if (tran.getUserID() == mc.getCurrentUser()) {
                    textArea += tran.toString() + "\n";
                }
            }

            TextAreaTran.setText(textArea.toString());
        

    }//GEN-LAST:event_LoadTransactionsActionPerformed

    private void LoadQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadQueueActionPerformed
       // add the queue ot the text area 
        String textArea = "";

        for (Items q : ic.getItems()) {

            if (q.getNumAvailable() == 0 && !q.getItemQ().isEmpty()) {
                textArea += q.getTitle() + " " + q.getItemQ().toString();
            }

        }

        requestTextArea.setText(textArea.toString());
    }//GEN-LAST:event_LoadQueueActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Welcome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Welcome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BorrowItemButton;
    private javax.swing.JTextField ItemNumbersearch;
    private javax.swing.JButton LoadQueue;
    private javax.swing.JButton LoadTransactions;
    private javax.swing.JButton LogOut;
    private javax.swing.JButton RefreshItemsButton;
    private javax.swing.JButton SearchItemButton;
    private javax.swing.JTextField SearchTitleField;
    public javax.swing.JTextArea TextAreaTran;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listOfItems;
    private javax.swing.JButton requestItemButton;
    private javax.swing.JTextArea requestTextArea;
    private javax.swing.JButton searchString;
    // End of variables declaration//GEN-END:variables
}
